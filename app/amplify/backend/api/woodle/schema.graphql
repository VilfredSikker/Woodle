type User
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, update, delete, read]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  username: String!
  activities: [Activity] @connection(keyName: "byActivity", fields: ["id"])
  friends: [FriendConnector] @connection(keyName: "byConnector", fields: ["id"])
}

# Create a join model and disable queries as you don't need them
# and can query through User.friends and connector.users
type FriendConnector
  @model(queries: null)
  @key(name: "byFriend", fields: ["friendID", "connectorID"])
  @key(name: "byConnector", fields: ["connectorID", "friendID"]) {
  id: ID!
  friendID: ID!
  connectorID: ID!
  friend: Friend! @connection(fields: ["friendID"])
  connector: User! @connection(fields: ["connectorID"])
}

type Friend
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  friendName: String!
  connectors: [FriendConnector] @connection(keyName: "byFriend", fields: ["id"])
  activities: [Activity] @connection(keyName: "byActivity", fields: ["id"])
}

type Activity
  @model
  @key(name: "byActivity", fields: ["userID", "name"])
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, update, delete, read]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  userID: ID!
  name: String!
  length: Float
  calories: Float
  duration: Float
  steps: Int
  path: [Coordinate]
}

type Coordinate {
  lat: Float
  lng: Float
}

type Query {
  getUserByName(username: String!): User
}
