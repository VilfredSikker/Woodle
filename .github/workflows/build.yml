# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Woodle

on:
  push:
    branches:
      - "master"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: npm build
        run: |
          cd app
          npm install
          npm run build
        env:
          CI: true

      - name: Push to staging
        run: |
          aws s3 sync build s3://www.sikkersoftware.dk --delete --exclude "*" --include "*.html" --cache-control "build, max-age=0, must-revalidate"
          aws s3 sync build s3://www.sikkersoftware.dk --delete --exclude "*" --include "static/*" --include "*.js" --include "*.css" --cache-control "build, max-age=31536000, immutable"
          aws s3 sync build s3://www.sikkersoftware.dk --delete --exclude "*" --include "fonts/*" --cache-control "build, max-age=290304000"
          aws s3 sync build s3://www.sikkersoftware.dk --delete --include "*" --exclude "*.html" --exclude "static/*" --exclude "*.js" --exclude "*.css" --exclude "fonts/*"
          aws cloudfront create-invalidation --distribution-id E37IFDUWUUAT0K --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
